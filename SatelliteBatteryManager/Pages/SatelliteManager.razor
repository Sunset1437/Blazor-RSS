@page "/satellite-manager"
@inject NavigationManager Navigation
@inject ILogger<SatelliteService> _logger
@inject SatelliteService _satteliteService
@implements IAsyncDisposable

<div class="cetered">
    <h3>Управление зарядкой спутника</h3>
</div>

<div class="container">
    <div class="card">
        <div class="card-header">
            <h5>Статус спутника</h5>
        </div>
        <div class="card-body">
            <p class="card-text">Уровень заряда: <strong>@FormatBatteryCharge(_satellite.BatteryCharge)</strong></p>
            <p class="card-text">Время активной работы: <strong>@FormatTime(_satellite.ActiveTime)</strong></p>
            <p class="card-text">Режим зарядки: <strong>@(_satellite.IsCharging ? "Включен" : "Выключен")</strong></p>
            <p class="card-text">Время последнего сеанса зарядки: <strong>@FormatTime(_satellite.LastChargeDuration)</strong></p>
            @if (_satellite.BatteryCharge < 5)
            {
                <div class="alert alert-warning">Предупреждение: Уровень заряда ниже 5%!</div>
            }
        </div>
    </div>

    <div>
        <button class="btn btn-success" @onclick="StartCharging" disabled="@_satellite.IsCharging">Начать зарядку</button>
        <button class="btn btn-danger" @onclick="StopCharging" disabled="@(!_satellite.IsCharging)">Остановить зарядку</button>
        
    </div>
</div>

@code {
    private Satellite _satellite = new Satellite();
    private HubConnection? _hubConnection;
    // <button class="btn btn-info" @onclick="RefreshStatus">Обновить статус</button>
    protected override async Task OnInitializedAsync()
    {
        // Создаем HubConnection с правильным URL
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri($"/{nameof(SatelliteHub)}"))
            .Build();

        // Подписываемся на обновления спутника
        _hubConnection.On<Satellite>(nameof(SatelliteHub.ReceiveBatteryUpdatedStatus), async (updatedSatellite) =>
        {
            _satellite = updatedSatellite;
            // Обновляем состояние компонента в безопасном контексте
            await InvokeAsync(StateHasChanged);
        });

        try
        {
            await _hubConnection.StartAsync(); // Устанавливаем соединение
        }
        catch (Exception ex)
        {
            _logger.LogInformation($"Connection error: {ex.Message}");
        }
    }

    private async Task StartCharging()
    {
        try
        {
            _satteliteService.ToggleCharging();
            await _hubConnection.InvokeAsync(nameof(SatelliteHub.ReceiveBatteryUpdatedStatus)); // Отправляем команду на сервер для начала зарядки
        }
        catch (Exception ex)
        {
            _logger.LogInformation($"Error when starting charging: {ex.Message}");
        }
    }

    private async Task StopCharging()
    {
        try
        {
            _satteliteService.ToggleCharging();
            await _hubConnection.InvokeAsync(nameof(SatelliteHub.ReceiveBatteryUpdatedStatus)); // Отправляем команду на сервер для остановки зарядки
        }
        catch (Exception ex)
        {
            _logger.LogInformation($"error when stopping charging: {ex.Message}");
        }
    }

    private string FormatBatteryCharge(double charge)
    {
        return $"{charge:F2}%";
    }

    private string FormatTime(TimeSpan time)
    {
        return string.Format("{0:D2}:{1:D2}:{2:D2}", (int)time.TotalHours, time.Minutes, time.Seconds);
    }

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync(); // Закрываем соединение при уничтожении компонента
        }
    }
}